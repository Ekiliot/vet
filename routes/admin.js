const express = require('express');
const router = express.Router();
const supabase = require('../config/supabase');

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é
const checkAuth = (req, res, next) => {
    console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {
        hasSession: !!req.session,
        isAuthenticated: req.session?.isAuthenticated,
        sessionId: req.session?.id
    });
    
    if (!req.session || !req.session.isAuthenticated) {
        console.log('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return res.status(401).json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø' });
    }
    
    console.log('‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    next();
};

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —á–µ—Ä–µ–∑ Supabase Auth
router.post('/login', async (req, res) => {
    try {
        const { login, password } = req.body;
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Supabase
        const { data, error } = await supabase.auth.signInWithPassword({
            email: login,
            password: password
        });
        
        if (error) {
            console.error('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Supabase:', error);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
        
        if (data.user) {
            // –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            req.session.isAuthenticated = true;
            req.session.userId = data.user.id;
            req.session.userEmail = data.user.email;
            
            console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
                sessionId: req.session.id,
                isAuthenticated: req.session.isAuthenticated,
                userId: req.session.userId,
                userEmail: req.session.userEmail
            });
            
            res.json({ 
                success: true, 
                message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
                user: {
                    id: data.user.id,
                    email: data.user.email
                }
            });
        } else {
            res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
router.post('/logout', async (req, res) => {
    try {
        // –í—ã—Ö–æ–¥ –∏–∑ Supabase
        const { error } = await supabase.auth.signOut();
        
        if (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ Supabase:', error);
        }
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º —Å–µ—Å—Å–∏—é
        req.session.destroy();
        res.json({ success: true, message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤
router.get('/stats', checkAuth, async (req, res) => {
    try {
        const { count, error } = await supabase
            .from('clients')
            .select('*', { count: 'exact', head: true });

        if (error) throw error;

        // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –ø–∏—Ç–æ–º—Ü–µ–≤
        const { data: petTypes, error: petError } = await supabase
            .from('clients')
            .select('pet_type')
            .not('pet_type', 'is', null);

        if (petError) throw petError;

        const petTypeStats = petTypes.reduce((acc, client) => {
            acc[client.pet_type] = (acc[client.pet_type] || 0) + 1;
            return acc;
        }, {});

        res.json({
            totalClients: count,
            petTypeStats,
            lastUpdated: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
router.get('/clients', checkAuth, async (req, res) => {
    try {
        const { data, error } = await supabase
            .from('clients')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) throw error;
        res.json(data);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ PDF
router.get('/export', checkAuth, async (req, res) => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF —ç–∫—Å–ø–æ—Ä—Ç–∞...');
    try {
        const { data, error } = await supabase
            .from('clients')
            .select('*')
            .order('created_at', { ascending: false });

        if (error) throw error;
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${data.length} –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞`);

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è PDF
        const htmlContent = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>–ö–ª–∏–µ–Ω—Ç—ã –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏ –§–µ–¥–æ—Ä–æ–≤–∞</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 20px;
            color: #333;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 3px solid #4f46e5;
            padding-bottom: 20px;
        }
        .header h1 {
            color: #4f46e5;
            margin: 0;
            font-size: 28px;
        }
        .header p {
            color: #666;
            margin: 5px 0;
            font-size: 14px;
        }
        .stats {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 25px;
            border-left: 4px solid #4f46e5;
        }
        .stats h3 {
            margin: 0 0 10px 0;
            color: #4f46e5;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        .stat-item {
            text-align: center;
            padding: 10px;
            background: white;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #4f46e5;
        }
        .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        th {
            background: #4f46e5;
            color: white;
            padding: 12px 8px;
            text-align: left;
            font-weight: 600;
            font-size: 12px;
        }
        td {
            padding: 10px 8px;
            border-bottom: 1px solid #e9ecef;
            font-size: 11px;
        }
        tr:nth-child(even) {
            background: #f8f9fa;
        }
        tr:hover {
            background: #e3f2fd;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #666;
            font-size: 12px;
            border-top: 1px solid #e9ecef;
            padding-top: 20px;
        }
        .no-data {
            text-align: center;
            padding: 40px;
            color: #666;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –§–µ–¥–æ—Ä–æ–≤–∞</h1>
        <p>–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º</p>
        <p>–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}</p>
    </div>
    
    <div class="stats">
        <h3>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
        <div class="stats-grid">
            <div class="stat-item">
                <div class="stat-number">${data.length}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${data.filter(c => c.pet_type === '—Å–æ–±–∞–∫–∞').length}</div>
                <div class="stat-label">–°–æ–±–∞–∫</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${data.filter(c => c.pet_type === '–∫–æ—à–∫–∞').length}</div>
                <div class="stat-label">–ö–æ—à–µ–∫</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${data.filter(c => c.pet_type === '–ø—Ç–∏—Ü–∞').length}</div>
                <div class="stat-label">–ü—Ç–∏—Ü</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${data.filter(c => c.pet_type === '–≥—Ä—ã–∑—É–Ω').length}</div>
                <div class="stat-label">–ì—Ä—ã–∑—É–Ω–æ–≤</div>
            </div>
            <div class="stat-item">
                <div class="stat-number">${data.filter(c => c.pet_type && !['—Å–æ–±–∞–∫–∞', '–∫–æ—à–∫–∞', '–ø—Ç–∏—Ü–∞', '–≥—Ä—ã–∑—É–Ω'].includes(c.pet_type)).length}</div>
                <div class="stat-label">–î—Ä—É–≥–∏—Ö</div>
            </div>
        </div>
    </div>
    
    ${data.length > 0 ? `
    <table>
        <thead>
            <tr>
                <th>‚Ññ</th>
                <th>–ò–º—è</th>
                <th>–§–∞–º–∏–ª–∏—è</th>
                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                <th>Email</th>
                <th>–ü–∏—Ç–æ–º–µ—Ü</th>
                <th>–¢–∏–ø</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>
                <th>–î–∞—Ç–∞</th>
            </tr>
        </thead>
        <tbody>
            ${data.map((client, index) => `
                <tr>
                    <td>${index + 1}</td>
                    <td>${client.first_name || ''}</td>
                    <td>${client.last_name || ''}</td>
                    <td>${client.phone || '-'}</td>
                    <td>${client.email || '-'}</td>
                    <td>${client.pet_name || '-'}</td>
                    <td>${client.pet_type || '-'}</td>
                    <td>${client.message ? (client.message.length > 30 ? client.message.substring(0, 30) + '...' : client.message) : '-'}</td>
                    <td>${new Date(client.created_at).toLocaleDateString('ru-RU')}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
    ` : `
    <div class="no-data">
        <h3>–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h3>
        <p>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
    </div>
    `}
    
    <div class="footer">
        <p>–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏ –§–µ–¥–æ—Ä–æ–≤–∞</p>
        <p>¬© 2024 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã</p>
    </div>
</body>
</html>`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è PDF
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename=clients_${new Date().toISOString().split('T')[0]}.pdf`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º html-pdf-node –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
        const pdf = require('html-pdf-node');
        const options = {
            format: 'A4',
            margin: { top: '20mm', right: '20mm', bottom: '20mm', left: '20mm' },
            printBackground: true
        };
        
        const file = { content: htmlContent };
        console.log('üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF...');
        const pdfBuffer = await pdf.generatePdf(file, options);
        
        console.log(`‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${pdfBuffer.length} –±–∞–π—Ç`);
        res.send(pdfBuffer);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: ' + error.message });
    }
});

module.exports = router; 